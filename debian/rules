#!/usr/bin/make -f

# (1) prepare
#
#     Apply Quilt patches.
#
#     Magic autotools stuff (replacing config.auto and config.guess with
#     up-to-date versions from the autotools-dev package. And some black
#     magic so that our patch to remove -lcrypto is actually doing something.
#     
# (2) extract
#
#     Copies the source directory into debian/tmp... to compile the
#     files there.
#
# (3) configure
#
#     Configure the copied source tree for each database backend flavor.
#
# (4) build
#
#     Compile the actual sources for each database backend flavor.

# Dependency graph:
# - build (configure)
# - install (make)
# - binary (make install)
#   - binary-arch (platform-dependent)
#     - binary-arch-agent 
#       - build-agent
#         - config-agent
#           - prepare
#             - patch
#       - install-agent
#     - binary-arch-server-mysql 
#       - build-server-mysql
#         - config-server-mysql
#           - prepare
#             - patch
#           - config-server-mysql-stamp
#       - install-server-mysql
#     - binary-arch-server-pgsql 
#       - build-server-pgsql
#         - config-server-pgsql
#           - prepare
#             - patch
#           - config-server-pgsql-stamp
#       - install-server-pgsql
#     - binary-arch-proxy-mysql 
#       - build-proxy-mysql
#         - config-proxy-mysql
#           - prepare
#             - patch
#           - config-proxy-mysql-stamp
#       - install-proxy-mysql
#     - binary-arch-proxy-pgsql
#       - build-proxy-pgsql
#         - config-proxy-pgsql
#           - prepare
#             - patch
#           - config-proxy-pgsql-stamp
#       - install-proxy-pgsql
#   - binary-indep (platform-independent)
#     - install-indep

# Enable this export to get more detailed information about what debhelper does
#export DH_VERBOSE=1

# These are used for cross-compiling and for saving the configure script
# from having to guess our platform (since we know it already)
export DEB_HOST_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
export DEB_BUILD_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)

## Include the 'quilt' patch manager using debian/patches
include /usr/share/quilt/quilt.make

## Define the names of the resulting binary packages
PKG_AGENT = zabbix-agent
PKG_SERVER_MYSQL = zabbix-server-mysql
PKG_SERVER_PGSQL = zabbix-server-pgsql
PKG_SERVER_SQLITE3 = zabbix-server-sqlite3
PKG_FRONTEND = zabbix-frontend-php
PKG_PROXY_MYSQL = zabbix-proxy-mysql
PKG_PROXY_PGSQL = zabbix-proxy-pgsql
PKG_PROXY_SQLITE3 = zabbix-proxy-sqlite3

# Define the directories where the binary packages' files are assembled
TMP_AGENT = $(CURDIR)/debian/$(PKG_AGENT)
TMP_SERVER_MYSQL = $(CURDIR)/debian/$(PKG_SERVER_MYSQL)
TMP_SERVER_PGSQL = $(CURDIR)/debian/$(PKG_SERVER_PGSQL)
TMP_SERVER_SQLITE3 = $(CURDIR)/debian/$(PKG_SERVER_SQLITE3)
TMP_FRONTEND = $(CURDIR)/debian/$(PKG_FRONTEND)
TMP_PROXY_MYSQL = $(CURDIR)/debian/$(PKG_PROXY_MYSQL)
TMP_PROXY_PGSQL = $(CURDIR)/debian/$(PKG_PROXY_PGSQL)
TMP_PROXY_SQLITE3 = $(CURDIR)/debian/$(PKG_PROXY_SQLITE3)

# Deprecated: formerly this script didn't use dh_install
INSTALL = install
INSTALL_FILE    = $(INSTALL) -p    -oroot -groot -m644
INSTALL_PROGRAM = $(INSTALL) -p    -oroot -groot -m755
INSTALL_SCRIPT  = $(INSTALL) -p    -oroot -groot -m755
INSTALL_DIR     = $(INSTALL) -p -d -oroot -groot -m755

# Deprecated: use unknown
#export LIBCURL_LDFLAGS="-lcurl" 

CFLAGS = -Wall -g

ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
    CFLAGS += -O0
else
    CFLAGS += -O2
endif
ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
    INSTALL_PROGRAM += -s
endif

# Zabbix server and proxy packages will be built for these database backends
VARIANTS := SQLITE3 PGSQL MYSQL

CONFFLAGS_COMMON  = --host=$(DEB_HOST_GNU_TYPE) \
                    --build=$(DEB_BUILD_GNU_TYPE) \
                    --prefix=/usr \
                    --mandir=\$${prefix}/share/man \
                    --infodir=\$${prefix}/share/info \
                    --enable-server \
                    --enable-agent \
                    --enable-proxy \
                    --with-jabber \
                    --with-ldap \
                    --enable-ipv6 \
                    --with-net-snmp \
                    --with-openipmi

CONFFLAGS_SERVER_MYSQL = $(CONFFLAGS_COMMON) --with-mysql
CONFFLAGS_SERVER_PGSQL = $(CONFFLAGS_COMMON) --with-pgsql
CONFFLAGS_SERVER_SQLITE3 = $(CONFFLAGS_COMMON) --with-sqlite3

# The source package will be compiled for each database flavor in
# subdirectories of this directory:
BUILDDIR := $(CURDIR)/debian/tmp-build

# Replace config.auto and config.guess from the current autotools-dev package
# and reconfigure the autoconf magic to have the "-lcrypto" linking removed.
prepare: patch prepare-stamp
prepare-stamp:
	dh_autotools-dev_updateconfig
	# we removed -lcrypto stuff so lets re-run autotools:
	aclocal -I m4
	autoconf
	autoheader
	automake -a
	automake
	touch prepare-stamp

# Copy the source directory (without the 'debian' directory) to other locations
# to configure and compile the sources there for each database flavor.
extract: prepare $(foreach s,$(VARIANTS),extract-$(s)-stamp)
extract-%-stamp:
	@echo "--------------------------"
	@echo "Copying source directory to $(BUILDDIR)-$(*) for building the $(*) variant there"
	@echo "--------------------------"
	mkdir $(BUILDDIR)-$(*)
	tar -cSf - --exclude=./.svn --exclude=./debian . | tar -xSpf - -C $(BUILDDIR)-$(*)
	touch $@

# Configure the flavors
configure: $(foreach s,$(VARIANTS),configure-$(s)-stamp)
configure-%-stamp: extract-%-stamp
	@echo "--------------------------"
	@echo "Configuring the $(*) flavor in $(BUILDDIR)-$(*)"
	@echo "--------------------------"
	dh_testdir
	cd $(BUILDDIR)-$(*) && ./configure $(CONFFLAGS_COMMON) $(CONFFLAGS_SERVER_$(*))
	touch $@

# Compile the flavors
build: $(foreach s,$(VARIANTS),build-$(s)-stamp)
build-%-stamp: configure-%-stamp
	@echo "--------------------------"
	@echo "Compiling the $(*) flavor in $(BUILDDIR)-$(*)"
	@echo "--------------------------"
	dh_testdir
	$(MAKE) -C $(BUILDDIR)-$(*)
	touch $@

#-------------------------

#build-agent: prepare build-agent-stamp
#build-agent-stamp:
#	@echo "--------------------------"
#	@echo "Building agent"
#	@echo "--------------------------"
#	dh_testdir
#	./configure $(CONFFLAGS_AGENT)
#	dh_testdir
#	$(MAKE)
#	touch $@
#
#build-server-mysql: config-server-mysql
#	dh_testdir
#	$(MAKE)
#
#config-server-mysql: prepare config-server-mysql-stamp
#config-server-mysql-stamp:
#	@echo "Configuring server mysql" 
#	dh_testdir
#	./configure $(CONFFLAGS_SERVER) --with-mysql
#	touch config-server-mysql-stamp
#
#build-server-pgsql: config-server-pgsql
#	dh_testdir
#	$(MAKE)
#
#config-server-pgsql: prepare config-server-pgsql-stamp
#config-server-pgsql-stamp:
#	@echo "Configuring server pgsql"
#	dh_testdir
#	./configure $(CONFFLAGS_SERVER) --with-pgsql
#	touch config-server-pgsql-stamp
#
#config-proxy-mysql: prepare config-proxy-mysql-stamp
#config-proxy-mysql-stamp:
#	@echo "Configuring proxy mysql"
#	dh_testdir
#	./configure $(CONFFLAGS_PROXY) --with-mysql
#	touch config-proxy-mysql-stamp
#
#build-proxy-mysql: config-proxy-mysql
#	dh_testdir
#	$(MAKE)
#
#config-proxy-pgsql: prepare config-proxy-pgsql-stamp
#config-proxy-pgsql-stamp:
#	@echo "Configuring proxy pgsql"
#	dh_testdir
#	./configure $(CONFFLAGS_PROXY) --with-pgsql
#	touch config-proxy-pgsql-stamp
#
#build-proxy-pgsql: config-proxy-pgsql
#	dh_testdir
#	$(MAKE)

clean: unpatch
	dh_testdir
	dh_testroot
	rm -f *-stamp
	rm -f config.log
	[ ! -f Makefile ] || $(MAKE) distclean
	[ ! -f src/zabbix_agent/Makefile ] || $(MAKE) -C src/zabbix_agent/ clean
	[ ! -f src/zabbix_get/Makefile ] || $(MAKE) -C src/zabbix_get/ clean
	[ ! -f src/zabbix_sender/Makefile ] || $(MAKE) -C src/zabbix_sender/ clean
	[ ! -f src/zabbix_proxy/Makefile ] || $(MAKE) -C src/zabbix_proxy/ clean
	debconf-updatepo
	dh_autotools-dev_restoreconfig
	# Remove build directories in $BUILDDIR
	$(RM) -r debian/tmp*
	dh_clean

#install-proxy-mysql: install-proxy-mysql-stamp
#install-proxy-mysql-stamp: build-proxy-mysql
#	echo ""
#	echo $(PKG_PROXY_MYSQL)
#	$(INSTALL_DIR) $(TMP_PROXY_MYSQL)
#	$(INSTALL_DIR) $(TMP_PROXY_MYSQL)/usr/sbin
#	$(INSTALL_DIR) $(TMP_PROXY_MYSQL)/etc/zabbix/
#	$(INSTALL_DIR) $(TMP_PROXY_MYSQL)/etc/logrotate.d/
#	$(INSTALL_DIR) $(TMP_PROXY_MYSQL)/etc/init.d/
#	$(INSTALL_DIR) $(TMP_PROXY_MYSQL)/usr/share/zabbix-proxy/
#	$(INSTALL_DIR) $(TMP_PROXY_MYSQL)/usr/share/doc/zabbix-proxy-mysql/
#	$(INSTALL_DIR) $(TMP_PROXY_MYSQL)/usr/share/dbconfig-common/data/$(PKG_PROXY_MYSQL)/install/
#	$(INSTALL_DIR) $(TMP_PROXY_MYSQL)/var/log/zabbix-proxy/
#	chmod 750 $(TMP_PROXY_MYSQL)/var/log/zabbix-proxy/
#	$(INSTALL_PROGRAM) src/zabbix_proxy/zabbix_proxy $(TMP_PROXY_MYSQL)/usr/sbin
#	#install schema + data sql files for dbc_config
#	$(INSTALL_FILE) create/schema/mysql.sql $(TMP_PROXY_MYSQL)/usr/share/dbconfig-common/data/$(PKG_PROXY_MYSQL)/install/mysql
#	cat create/data/data.sql >> $(TMP_PROXY_MYSQL)/usr/share/dbconfig-common/data/$(PKG_PROXY_MYSQL)/install/mysql
#	cat create/data/images_mysql.sql >> $(TMP_PROXY_MYSQL)/usr/share/dbconfig-common/data/$(PKG_PROXY_MYSQL)/install/mysql
#	$(INSTALL_FILE) debian/templates/zabbix_proxy.conf.in $(TMP_PROXY_MYSQL)/usr/share/zabbix-proxy/zabbix_proxy.conf
#	$(INSTALL_FILE) debian/zabbix-proxy-mysql.logrotate $(TMP_PROXY_MYSQL)/etc/logrotate.d/zabbix-proxy-mysql
#	$(INSTALL_FILE) create/schema/mysql.sql $(TMP_PROXY_MYSQL)/usr/share/zabbix-proxy/
#	$(INSTALL_FILE) create/data/data.sql $(TMP_PROXY_MYSQL)/usr/share/zabbix-proxy/
#	dh_installinit -p $(PKG_PROXY_MYSQL) --name zabbix-proxy
#	dh_install -a
#	touch install-proxy-mysql-stamp
#
#install-proxy-pgsql: install-proxy-pgsql-stamp
#install-proxy-pgsql-stamp: build-proxy-pgsql
#	echo ""
#	echo $(PKG_PROXY_PGSQL)
#	$(INSTALL_DIR) $(TMP_PROXY_PGSQL)
#	$(INSTALL_DIR) $(TMP_PROXY_PGSQL)/usr/sbin
#	$(INSTALL_DIR) $(TMP_PROXY_PGSQL)/etc/zabbix/
#	$(INSTALL_DIR) $(TMP_PROXY_PGSQL)/etc/logrotate.d/
#	$(INSTALL_DIR) $(TMP_PROXY_PGSQL)/etc/init.d/
#	$(INSTALL_DIR) $(TMP_PROXY_PGSQL)/usr/share/zabbix-proxy/
#	$(INSTALL_DIR) $(TMP_PROXY_PGSQL)/usr/share/doc/zabbix-proxy-pgsql/
#	$(INSTALL_DIR) $(TMP_PROXY_PGSQL)/usr/share/dbconfig-common/data/$(PKG_PROXY_PGSQL)/install/
#	$(INSTALL_DIR) $(TMP_PROXY_PGSQL)/var/log/zabbix-proxy/
#	chmod 750 $(TMP_PROXY_PGSQL)/var/log/zabbix-proxy/
#	$(INSTALL_PROGRAM) src/zabbix_proxy/zabbix_proxy $(TMP_PROXY_PGSQL)/usr/sbin
#	$(INSTALL_FILE) debian/templates/zabbix_proxy.conf.in $(TMP_PROXY_PGSQL)/usr/share/zabbix-proxy/zabbix_proxy.conf
#	$(INSTALL_FILE) debian/zabbix-proxy-mysql.logrotate $(TMP_PROXY_PGSQL)/etc/logrotate.d/zabbix-proxy-pgsql
#	$(INSTALL_FILE) create/schema/postgresql.sql $(TMP_PROXY_PGSQL)/usr/share/zabbix-proxy/
#	$(INSTALL_FILE) create/data/data.sql $(TMP_PROXY_PGSQL)/usr/share/zabbix-proxy/
#	# install schema + data sql files for dbc_config
#	$(INSTALL_FILE) create/schema/postgresql.sql $(TMP_PROXY_PGSQL)/usr/share/dbconfig-common/data/$(PKG_PROXY_PGSQL)/install/pgsql
#	cat create/data/data.sql >> $(TMP_PROXY_PGSQL)/usr/share/dbconfig-common/data/$(PKG_PROXY_PGSQL)/install/pgsql
#	cat create/data/images_pgsql.sql >> $(TMP_PROXY_PGSQL)/usr/share/dbconfig-common/data/$(PKG_PROXY_PGSQL)/install/pgsql
#	dh_installinit -p $(PKG_PROXY_PGSQL) --name zabbix-proxy
#	dh_install -a
#	touch install-proxy-pgsql-stamp
#
## Build architecture-independent files here.
#binary-indep: install-indep
#	dh_testdir -i
#	dh_testroot -i
#	dh_prep -i
#	dh_installdirs -i
#	dh_install -i
#	# --------------------------------
#	# Rename during install
#	# zabbix-frontend-php
#	cp debian/templates/dbconfig.php.in $(TMP_FRONTEND)/usr/share/doc/zabbix-frontend-php/dbconfig.php
#	cp debian/conf/apache.conf $(TMP_FRONTEND)/etc/zabbix/apache.conf
#	# --------------------------------
#	# zabbix-frontend-php
#	# javscript libraries and fonts come from the respective Debian packages.
#	# they get linked later with dh_link.
#	rm -r $(TMP_FRONTEND)/usr/share/zabbix/fonts/DejaVuSans.ttf
#	rm -r $(TMP_FRONTEND)/usr/share/zabbix/js/prototype.js
#	rm -r $(TMP_FRONTEND)/usr/share/zabbix/js/scriptaculous*
#	rm -f $(TMP_FRONTEND)/usr/share/zabbix/conf/COPYING
#	# --------------------------------
#	# zabbix-frontend-php
#	# disable frontend-based installation
#	chmod 000 $(TMP_FRONTEND)/usr/share/zabbix/setup.php
#	# --------------------------------
#	dh_installdocs -i
#	dh_installchangelogs -i ChangeLog
#	dh_installexamples -i
#	dh_installman -i
#	dh_installdebconf -i
#	dh_installinit -i
#	dh_installlogrotate -i
#	dh_link -i
#	dh_compress -i
#	dh_fixperms -i
#	dh_installdeb -i
#	dh_gencontrol -i
#	dh_md5sums -i
#	dh_builddeb -i

# Build architecture-dependent files here.
#binary-arch: binary-arch-agent binary-arch-server-mysql binary-arch-server-pgsql binary-arch-proxy-mysql binary-arch-proxy-pgsql
binary-arch: build
	dh_testdir -a
	dh_testroot -a
	dh_prep -a
	dh_installdirs -a
	dh_install -a
	# Rename during install
	# zabbix-agent
	cp debian/templates/zabbix_agent.conf.in $(TMP_AGENT)/usr/share/$(PKG_AGENT)/zabbix_agent.conf
	cp debian/templates/zabbix_agentd.conf.in $(TMP_AGENT)/usr/share/$(PKG_AGENT)/zabbix_agentd.conf
	# zabbix-server-mysql
	cp debian/templates/zabbix_server.conf.in $(TMP_SERVER_MYSQL)/usr/share/doc/$(PKG_SERVER_MYSQL)/zabbix_server.conf
	cat create/schema/mysql.sql create/data/data.sql create/data/images_mysql.sql > $(TMP_SERVER_MYSQL)/usr/share/dbconfig-common/data/$(PKG_SERVER_MYSQL)/install/mysql
	# zabbix-server-pgsql
	cp debian/templates/zabbix_server.conf.in $(TMP_SERVER_PGSQL)/usr/share/doc/$(PKG_SERVER_PGSQL)/zabbix_server.conf
	cat create/schema/postgresql.sql create/data/data.sql create/data/images_pgsql.sql > $(TMP_SERVER_PGSQL)/usr/share/dbconfig-common/data/$(PKG_SERVER_PGSQL)/install/pgsql
	# zabbix-server-sqlite3
	cp debian/templates/zabbix_server.conf.in $(TMP_SERVER_SQLITE3)/usr/share/doc/$(PKG_SERVER_SQLITE3)/zabbix_server.conf
	cat create/schema/sqlite.sql create/data/data.sql create/data/images_sqlite3.sql > $(TMP_SERVER_SQLITE3)/usr/share/dbconfig-common/data/$(PKG_SERVER_SQLITE3)/install/sqlite3
	# --------------------------------
	dh_installdocs -a
	dh_installchangelogs -a ChangeLog
	dh_installexamples -a
	dh_installman -a
	dh_installdebconf -a
	#dh_installinit -a
	dh_installinit -p $(PKG_SERVER_MYSQL) --name zabbix-server
	dh_installinit -p $(PKG_SERVER_PGSQL) --name zabbix-server
	dh_installinit -p $(PKG_SERVER_SQLITE3) --name zabbix-server
	dh_installlogrotate -a
	dh_link -a
	dh_compress -a
	dh_fixperms -a
	dh_strip -a
	dh_makeshlibs -a
	dh_shlibdeps -a
	dh_installdeb -a
	dh_gencontrol -a
	dh_md5sums -a
	dh_builddeb -a

binary: binary-arch binary-indep

#.PHONY: build build-server-mysql build-server-pgsql build-proxy-mysql build-proxy-pgsql config-server-mysql config-server-pgsql config-proxy-mysql config-proxy-pgsql clean install install-indep install-server-mysql install-server-pgsql install-proxy-mysql install-proxy-pgsql install-agent build-agent binary-indep binary-arch binary-arch-server-mysql binary-arch-server-pgsql binary-arch-agent binary-arch-proxy-mysql binary-arch-proxy-pgsql binary
